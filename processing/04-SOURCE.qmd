---
title: "04-Fuentes de Invarianza"
format: html
editor: visual
---

## Librerías

```{r}
#| label: packages
#| include: false

if (!require("pacman")) install.packages("pacman")

pacman::p_load(tidyverse,
               sjmisc, 
               sjPlot,
               here,
               lavaan,
               psych,
               corrplot,
               ggdist,
               patchwork,
               semTable,
               semTools,
               gtools,
               kableExtra)
```

## Datos

```{r}
#| label: data
#| echo: true
#| output: false

options(scipen=999)
rm(list = ls())

load("C:/Users/renec/OneDrive/Escritorio/EDUMer/db_long_proc.RData")


names(db_long)
glimpse(db_long)
```

## Test de invarianza longitudinal 

```{r}
#| label: tbl-invarianza
#| tbl-cap: "Resultados de invarianza longitudinal"
#| results: asis
#| echo: false
#| warning: false

db_invariance <- 
  db_long %>% 
  select(id_estudiante, ola, starts_with(c("perc", "pref"))) %>% 
  pivot_wider(id_cols = id_estudiante,
              names_from = ola,
              names_glue = "{.value}{ola}",
              values_from = c(perc_effort, perc_talent,
                              perc_rich_parents, perc_contact,
                              pref_effort, pref_talent,
                              pref_rich_parents, pref_contact)) %>% 
  na.omit() %>% 
  rename_with(~str_replace_all(., "_", ""))
  


# First, define the configural model, using the repeated measures factors and
# indicators
configural_model_smt <- ("
  # Measurement model
  percmerit1 =~ perceffort1 + perctalent1
  percmerit2 =~ perceffort2 + perctalent2
  percnmerit1 =~ percrichparents1 + perccontact1
  percnmerit2 =~ percrichparents2 + perccontact2
  prefmerit1 =~ prefeffort1 + preftalent1
  prefmerit2 =~ prefeffort2 + preftalent2
  prefnmerit1 =~ prefrichparents1 + prefcontact1
  prefnmerit2 =~ prefrichparents2 + prefcontact2
")


# Second, create a named list indicating which factors are actually the same
# latent variable measured repeatedly.
longitudinal_factor_names <- list(
  comp = c("percmerit1", "percmerit2", 
           "percnmerit1", "percnmerit2",
           "prefmerit1", "prefmerit2",
           "prefnmerit1", "prefnmerit2")
)


# Configural
# Third, generate the lavaan model syntax using semTools.
configural_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "millsap",
  data = db_invariance
)
configural_model_smt <- as.character(configural_model_smt)

# Finally, fit the model using lavaan.
configural_model_smt_fit <- sem(configural_model_smt, data = db_invariance)

# Weak
weak_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "millsap",
  long.equal = c("loadings"),
  data = db_invariance
)
weak_model_smt <- as.character(weak_model_smt)

weak_model_smt_fit <- sem(weak_model_smt, data = db_invariance)

# Strong

strong_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "millsap",
  long.equal = c("loadings", "lv.variances"),
  data = db_invariance
)

strong_model_smt <- as.character(strong_model_smt)

strong_model_smt_fit <- sem(strong_model_smt, data = db_invariance)


# Strict
strict_model_smt <- measEq.syntax(
  configural.model = configural_model_smt,
  longFacNames = longitudinal_factor_names,
  ID.fac = "std.lv",
  ID.cat = "millsap",
  long.equal = c("loadings", "lv.variances", "residuals"),
  data = db_invariance
)
strict_model_smt <- as.character(strict_model_smt)

strict_model_smt_fit <- sem(strict_model_smt, data = db_invariance)


# Compare ajust

tab01 <- lavTestLRT(configural_model_smt_fit, weak_model_smt_fit, strong_model_smt_fit, strict_model_smt_fit) %>%
  dplyr::as_tibble() %>%
  dplyr::select("Chisq","Df","chisq_diff"=`Chisq diff`,"df_diff"=`Df diff`,"pvalue"=`Pr(>Chisq)`) %>%
  dplyr::mutate(stars=gtools::stars.pval(pvalue),
                chisqt=paste0(round(Chisq,2)," (",Df,") "),
                decision=ifelse(pvalue>0.05,yes = "Accept",no = "Reject"),
                model=c("Configural","Weak","Strong","Strict"))


fit.meas <- dplyr::bind_rows(lavaan::fitmeasures(configural_model_smt_fit, output ="matrix")[c("chisq","df","cfi","rmsea","rmsea.ci.lower","rmsea.ci.upper"),],
                             lavaan::fitmeasures(weak_model_smt_fit,  output ="matrix")[c("chisq","df","cfi","rmsea","rmsea.ci.lower","rmsea.ci.upper"),],
                             lavaan::fitmeasures(strong_model_smt_fit, output ="matrix")[c("chisq","df","cfi","rmsea","rmsea.ci.lower","rmsea.ci.upper"),],
                             lavaan::fitmeasures(strict_model_smt_fit, output ="matrix")[c("chisq","df","cfi","rmsea","rmsea.ci.lower","rmsea.ci.upper"),])

fit.meas <- fit.meas %>%
  dplyr::mutate(diff.chi2 = chisq    - lag(chisq,default = dplyr::first(chisq)),
                diff.df   = df       - lag(df,   default = dplyr::first(df)),
                diff.cfi  = cfi      - lag(cfi,  default = dplyr::first(cfi)),
                diff.rmsea   = rmsea - lag(rmsea,default = dplyr::first(rmsea))) %>%
  round(3) %>%
  dplyr::mutate(rmsea.ci=paste0(rmsea," \n ", "(",rmsea.ci.lower,"-",rmsea.ci.upper,")"))

tab.inv <- dplyr::bind_cols(tab01,fit.meas) %>%
  dplyr::select(model,chisqt,cfi,rmsea.ci,diff.chi2,diff.df,diff.cfi,diff.rmsea,stars,decision) %>%
  dplyr::mutate(diff.chi2=paste0(diff.chi2," (",diff.df,") ",stars)) %>%
  dplyr::select(model,chisqt,cfi,rmsea.ci,diff.chi2,diff.cfi,diff.rmsea,decision)

#clean values
tab.inv[tab.inv == c("0 (0) ")] <- NA
tab.inv[tab.inv == c(0)] <- NA


col.nam <- c("Model","&chi;^2 (df)","CFI","RMSEA (90 CI)",
             "&Delta; &chi;^2 (&Delta; df)","&Delta; CFI","&Delta; RMSEA","Decision")
footnote <- paste0("N = ",configural_model_smt_fit@Data@nobs[[1]])

tab.inv %>% 
  kableExtra::kable(format = "html",
                    align = "c",
                    booktabs = T,
                    escape = F,
                    caption = NULL,
                    col.names = col.nam) %>%
  kableExtra::kable_styling(full_width = T,
                            latex_options = "hold_position",
                            bootstrap_options=c("striped", "bordered", "condensed"),
                            font_size = 23) %>%
 kableExtra::column_spec(c(1,8), width = "3.5cm") %>% 
kableExtra::column_spec(2:7, width = "4cm") %>% 
  kableExtra::column_spec(4, width = "5cm")


```

## Fuentes de Invarianza Longitudinal

```{r}
#| label: tbl-lavTestScore
#| tbl-cap: "Fuentes de Invarianza Longitudinal"
#| results: asis
#| echo: false
#| warning: false


#Run lavTestScore on strong invariance model
score_result <- lavTestScore(strong_model_smt_fit)

#Extract univariate score test results
score_df <- score_result$uni

#Create readable table with evaluation

score_table <- score_df %>%
  mutate(
    restriction = paste(lhs, op, rhs),
    evaluation = case_when(
      p.value >= 0.05 ~ "No violation",
      p.value >= 0.01 ~ "Possible violation",
      TRUE ~ "Clear violation"
    )
  ) %>%
  select(restriction, X2, df, p.value, evaluation)

col.nam <- c("Restriction Tested", "Chi-square", "df", "p-value", "Evaluation")

score_table %>%
  kable(format = "html",
        align = "c",
        booktabs = TRUE,
        escape = FALSE,
        caption = "Assessment of Metric Invariance Based on Score Test (Strong Invariance Model)",
        col.names = col.nam,
        digits = 3) %>%
  kable_styling(
    full_width = TRUE,
    bootstrap_options = c("striped", "bordered", "condensed"),
    latex_options = "hold_position",
    font_size = 18
  ) %>%
  column_spec(1, width = "5cm") %>%
  column_spec(2:4, width = "3.5cm") %>%
  column_spec(5, width = "4cm")
 


```

**Restricción `.p1. == .p3.`**

-   Valor p = 0.742, **No significativa**\
    Se puede mantener esta igualdad. No hay evidencia de que ese parámetro cambie en el tiempo.

**Restricción `.p1. == .p5.`**

-   Valor p = 0.022, **Significativa**\
    **Esta igualdad no se sostiene**, por lo tanto podría ser liberada la restricción.

**Restricciones `.p1. == .p7.`, `.p1. == .p9.`, `.p1. == .p11.`**

-   Todos con p \< 0.05, **Significativa**\
    Estas igualdades **también deben considerarse para ser liberadas**, ya que hay evidencia clara de falta de invarianza.

**Restricciones como `.p1. == .p13.`, `.p1. == .p15.` o `.p2. == .p4.`**

-   **No significativas** (p \> 0.05): Se pueden mantener.

## Información específica de los parámetros

```{r}
#| label: info-parametros

param_info <- parameterEstimates(strong_model_smt_fit, standardized = FALSE) %>%
  dplyr::mutate(index = dplyr::row_number()) %>%
  dplyr::select(index, lhs, op, rhs, label)
```

```{r}
#| label: tbl-param_info
#| tbl-cap: "Parámetros Específicos"
#| results: asis
#| echo: false
#| warning: false

param_info %>% filter(index %in% c(1, 5, 7, 9, 11, 13)) # Selection of the parameters wose charges between waves remains the same

# Original Table with Parameters
structure <- tibble::tribble(
  ~index, ~factor,        ~item,              ~wave,    ~label,        ~param,
  1,      "percmerit",    "perceffort1",      "Wave 1", "lambda.1_1",   ".p1.",
  5,      "percnmerit",   "percrichparents1", "Wave 1", "lambda.1_1",   ".p5.",
  7,      "percnmerit",   "percrichparents2", "Wave 2", "lambda.1_1",   ".p7.",
  9,      "prefmerit",    "prefeffort1",      "Wave 1", "lambda.1_1",   ".p9.",
  11,     "prefmerit",    "prefeffort2",      "Wave 2", "lambda.1_1",   ".p11.",
  13,     "prefnmerit",   "prefrichparents1", "Wave 1", "lambda.1_1",   ".p13."
)

# Invariance test results
test_results <- tibble::tribble(
  ~lhs,   ~op,  ~rhs,   ~X2,     ~df, ~p.value,
  ".p1.", "==", ".p3.", 0.108,   1,   0.742,
  ".p1.", "==", ".p5.", 5.244,   1,   0.022,
  ".p1.", "==", ".p7.", 17.963,  1,   0.000,
  ".p1.", "==", ".p9.", 14.775,  1,   0.000,
  ".p1.", "==", ".p11.",11.124,  1,   0.001,
  ".p1.", "==", ".p13.",1.226,   1,   0.268,
  ".p1.", "==", ".p15.",0.191,   1,   0.662,
  ".p2.", "==", ".p4.", 0.416,   1,   0.519,
  ".p2.", "==", ".p6.", 13.308,  1,   0.000,
  ".p2.", "==", ".p8.", 17.162,  1,   0.000
)

# Procesamiento de decisiones por parámetro
decisions <- test_results %>%
  select(lhs, rhs, p.value) %>%
  pivot_longer(cols = c(lhs, rhs), names_to = "side", values_to = "param") %>%
  distinct(param, p.value) %>%
  group_by(param) %>%
  summarise(min_p = min(p.value, na.rm = TRUE), .groups = "drop") %>%
  mutate(decision = ifelse(min_p < 0.05, "Not invariant", "Invariant"))

# Unión con tabla base
structure_final <- structure %>%
  left_join(decisions, by = "param") %>%
  select(index, factor, item, wave, label, param, decision)


structure_final %>%
  kable(
    format = "html",
    col.names = c("Index", "Latent Factor", "Item", "Wave", "Label", "Parameter", "Strong Invariance"),
    caption = "Quality Assessment Table – Strong Invariance (Automated)",
    align = "c",
    booktabs = TRUE,
    escape = FALSE
  ) %>%
  kable_styling(
    bootstrap_options = c("striped", "bordered", "condensed", "hover"),
    latex_options = "hold_position",
    full_width = TRUE,
    font_size = 18
  ) %>%
  column_spec(1, width = "2cm") %>%
  column_spec(2:4, width = "3.5cm") %>%
  column_spec(5:6, width = "4cm") %>%
  column_spec(7, width = "3.5cm", bold = TRUE)


```

### **Explicación por parámetro**

1.   **perceffort1 (Index 1, .p1., Not invariant)**\
    Este ítem mide "esfuerzo" como parte del factor *percmerit* en la primera ola. El resultado indica que su carga factorial cambia significativamente en el tiempo, lo que sugiere que su relación con el factor latente no es estable entre olas. No se puede asumir que este ítem mide el constructo de manera equivalente en todas las mediciones.

2.  **percrichparents1 (Index 5, .p5., Not invariant)**\
    Este ítem está asociado al factor *percnmerit* en la primera ola referido a la percepción sobre la importancia de tener padres ricos. La no invarianza implica que la fuerza de esta asociación con el factor cambia entre olas. El ítem no se comporta de manera constante en el tiempo.

3.   **percrichparents2 (Index 7, .p7., Not invariant)**\
    Similar al anterior, pero en la segunda ola. Al ser también "Not invariante", refuerza la evidencia de inestabilidad temporal de este ítem.

4.  **prefeffort1 (Index 9, .p9., Not invariant)**\
    Este ítem representa la preferencia por el esfuerzo como criterio de mérito (*prefmerit*) en la primera ola. Su falta de invarianza indica que los encuestados no interpretan de forma consistente el papel del esfuerzo a través del tiempo, o que su importancia cambia a nivel estructural.

5.   **prefeffort2 (Index 11, .p11., Not invariant)**\
    Este es el mismo ítem pero medido en la segunda ola. También se encuentra no invariante, lo que sugiere que la variación detectada no es un artefacto de una sola ola, sino una tendencia más general.

6.   **prefrichparents1 (Index 13, .p13., Invariant)**\
    Este ítem mide la preferencia por tener padres ricos como fuente de mérito, en la primera ola, asociado al factor *prefnmerit*. Al ser "Invariante", se interpreta que su asociación con el constructo no cambia significativamente entre olas, lo cual permite compararlo longitudinalmente sin sesgos de medición.
